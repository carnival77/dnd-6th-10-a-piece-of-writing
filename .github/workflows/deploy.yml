name: a-piece-of-writing

on:
  push:
    branches:
      - main
      - feature/front-workflow

  workflow_dispatch: # (2) 수동 실행
#  브랜치 push 이벤트외에, 수동으로 실행하는 것도 가능하게 만드는 옵션입니다.

# S3 버킷 관련 설정
env:
  S3_BUCKET_NAME: a-piece-of-writing-bucket
  PROJECT_NAME: a-piece-of-writing



jobs:
  build:
    # 해당 Github Action 스크립트가 작동될 OS 환경을 지정합니다.
    runs-on: ubuntu-latest
    
    # env를 선언하여 working directory를 상수로 저장해 둡니다.
    # working-directory 프로퍼티는 명령을 실행할 때 마다 수행해 주어야 합니다. 터미널처럼 한번 경로를 이동한다고 상태가 남는 것이 아니라 매번 새로 실행하기 때문입니다.
    env:
      backend-directory: ./backend

    steps:
      # 프로젝트 코드를 checkout 합니다.
      # checkout 은 깃헙이 제공하는 워크스페이스 (이 workflow 를 실행하는 공간) 에서 내 저장소가 위치한 곳으로 이동한다고 생각하시면 됩니다.
      - name: Checkout
        uses: actions/checkout@v2 # (4)
        
      # 프론트엔드 변경 감지
      - uses: marceloprado/has-changed-path@v1
        id: changed-frontend
        with:
            paths: frontend
              
      # 백엔드 변경 감지
      - uses: marceloprado/has-changed-path@v1
        id: changed-backend
        with:
            paths: backend
      
      # ---- 프론트엔드 ----

      - name: Set up Node JS 16
        uses: actions/setup-node@v2
        with:
            node-version: '16'

      - name: Build frontend
        if: steps.changed-frontend.outputs.changed == 'true'
        working-directory: ./frontend
        run: |
          npm install -g yarn
          yarn install --prefer-offline --frozen-lockfile
          yarn build
        env:
          DEPLOY_ENV: production

      - name: Make frontend Tag
        if: steps.changed-frontend.outputs.changed == 'true'
        run: echo -e "frontend" > is-frontend-changed
        shell: bash
          
      # ---- 백엔드 ----

      # java 를 셋업하고 gradlew 에 실행권한을 준 뒤 프로젝트를 build 하는 과정
      # Github Action이 실행될 OS에 Java를 설치합니다.
      - name: Set up JDK 1.8
        if: steps.changed-backend.outputs.changed == 'true'
        uses: actions/setup-java@v1 # (5)
        with:
          java-version: 1.8
      
      # gradle wrapper를 실행할 수 있도록 실행 권한 (+x)을 줍니다.
      # 해당 실행 권한이 있어야 아래 (7) 를 실행할 수 있습니다.
      - name: Grant execute permission for gradlew
        if: steps.changed-backend.outputs.changed == 'true'
        run: chmod +x ./gradlew # (6)
        working-directory: ${{ env.backend-directory }}
        shell: bash

      # gradle wrapper를 통해 해당 프로젝트를 build 합니다.
      - name: Build backend with Gradle
        if: steps.changed-backend.outputs.changed == 'true'
        run: ./gradlew clean build # (7)
        working-directory: ${{ env.backend-directory }}
        shell: bash

      
      # ---- 배포 단계 ----

  
      # 백엔드용 변경사항이 일어났음을 알려주는 태그를 생성한다.
      - name: Make backend Tag
        if: steps.changed-backend.outputs.changed == 'true'
        run: echo -e "backend" > is-backend-changed
        shell: bash
      
      # S3 관련 설정
      # 업로드할 때는 zip 으로 압축하는 과정이 필요
      - name: Make zip file backend
        if: steps.changed-backend.outputs.changed == 'true'
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash
        # $GITHUB_SHA : 현재 workflow 를 실행시키는 커밋의 해쉬값

      # build 시점의 현재 시간을 확인하는 기능
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # get-current-time 에서 지정한 포맷대로 현재 시간을 노출하게 됩니다.
      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        shell: bash

      # AWS credential 을 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3 버킷에 build 한 jar 파일을 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip
#        working-directory: ${{ env.backend-directory }}

      # CodeDeploy 관련 설정
      - name: Code Deploy
        run: aws deploy create-deployment --application-name a-piece-of-writing-deploy --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name a-piece-of-writing-webservice-group --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip