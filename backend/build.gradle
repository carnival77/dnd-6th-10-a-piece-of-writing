buildscript {
    ext {

        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'base'
}

group 'com'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

// QueryDSL
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('mysql:mysql-connector-java')
    implementation('junit:junit:4.13.1')
    implementation('com.fasterxml.jackson.core:jackson-databind')

// testRestTemplate
    implementation('org.apache.httpcomponents:httpclient:4.5.13')

//    GCloud Storage
    implementation platform('com.google.cloud:libraries-bom:24.2.0')
    implementation('com.google.cloud:google-cloud-storage')

//    Google Vision API
    implementation('com.google.cloud:google-cloud-vision')

//    validator
    implementation('org.hibernate:hibernate-validator:6.1.0.Final')

//    redis
    implementation('org.springframework.boot:spring-boot-starter-data-redis')

//    swagger3
    implementation('io.springfox:springfox-boot-starter:3.0.0')

//    Lombok
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok-mapstruct-binding:0.2.0')

//    Mapstruct
    implementation('org.mapstruct:mapstruct:1.4.2.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')
    testAnnotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')

//    Security
    implementation('org.springframework.boot:spring-boot-starter-security')

//    JWT
    implementation('com.auth0:java-jwt:3.18.3')

// testing
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("org.springframework.security:spring-security-test")

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

}

// QueryDSL
sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

test {
    useJUnitPlatform()
}